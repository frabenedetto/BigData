esercizio 1:

STAGE I:

//da t1,a,b; t2,b,c passa a a->[1], b->[1,1], c->[1]
Map(Text line) :
	String[] products = Tokenize(line, ',');
	//i parte da 1 perchè non prendo la data
	for(i=1;i<products.length;i++)
		emit(products[i], 1);

da a->[1], b->[1,1], c->[1] passa a a->[1], b->[2], c->[1]
Reduce(String product, int[] counts):
	int sum = 0;
	for each c in counts:
		sum += c;
	emit(product, sum);

STAGE II:

//da a->[1], b->[2], c->[1] passa a 2->[b], 1->[a,c]; legge l'input e ordina decresc. le chiavi
//per l'ordinamento discendente è stato usato un apposito comparatore settato nel main
Map(String product, int quantity)
	foreach input_couple:
		emit(quantity, product);

//da 2->[b], 1->[a,c] passa a b->2, a->1, c->1; 
Reduce(int quantity, String[] products):
	foreach product in products:
		emit(product, quantity);


esercizio 2:

STAGE I:

//da "t1,a,b; t2,b,c;" genera "a->[m1], b->[m1,m1], c->[m1]", solo se t1 e t2 sono date che cadono nel primo trimestre. Inoltre a t1 e t2 viene tolto il giorno(vengono trasformate in m).
Map(Text line) :
	String[] bill = Tokenize(line, ',');
	//verifica della data(che sta in bill[0])
	if(isInFirstTrimester(bill[0])):
		//elimina l'informazione del giorno dalla data
		date = bill[0].substring;
		for(i=1;i<bill.length;i++)
			emit(bill[i], date);

//da "a->[m1], b->[m1,m1], c->[m1]" genera a-> m1:1, b->m1:2, c->m1:1. In questo esempio si è ipotizzato che le date nello scontrino di partenza appartenessero tutte allo stesso mese, il quale cade nel primo trimestre
Reduce(String product, String[] dates ):
	//conta la quantità venduta del prodotto in ogni mese del trimestre
	foreach(date: dates):
		if(isJanuary(date))
			januaryCounter++;
		else if (isFebruary(date))
			febCounter++;
		else
			marchCounter++;
	//genera la stringa data1:quantita, data2:quantità..
	String dates2quantity = "";
	foreach(date: dates):
		if(isJanuary(date))
			dates2quantity+=date.concat(januaryCounter);
		else if (isFebruary(date))
			dates2quantity+=date.concat(febCounter);
		else
			dates2quantity+=date.concat(marchCounter);
	//emetti il risultato
	emit(product, dates2quantity);

esercizio 3:

STAGE I:

//da t1,a,b; t2,b,a,c genera (a,b)->[1,1], (b,c)->[1], (a,c)->[1]
Map(Text line):
	String[] bill = Tokenize(line, ',');
	//parto da i=1 perchè la data non mi serve
		for(i=1;i<bill.length-1;i++)
			for(j=i+1;bill.length;j++)
				product1 = bill[i];
				product2 = bill[j];
				//crea la coppia di prodotti mettendo sulla sinistra quello che viene prima dei due secondo l'ordine lessicografico
				if(product1.compareTo(product2))
					emit(ProductPair(product2, product1), 1);
				else
					emit(ProductPair(product2, product1),1);
//somma gli uno
Reduce(ProductPair pair, int[] counts):
	int sum = 0;
	for each c in counts:
		sum += c;
	emit(pair, sum);

STAGE II(ordina e filtra):

Map(ProductPair pair, int quantity):
	emit(pair, quanitity);

//è 1 unico reducer
Reduce(ProductPair pair, int[] quantity):
	//coda di priorità lunga 10, che contiene le coppie di elementi ordinati decrescentemente per quantità 
	PriorityQueue<ProductPair2Quantity> queue;
	queue.add(ProductPair2Quantity(pair, quantity[0]));
	if(queue.size>10)
		queue.removeLast;


esercizio facoltativo A:

STAGE I:

//da t1,a,b; t2,b,a,c genera (a,a)->[1,1], (b,b)->[1,1], (c,c)->[1],(a,b)->[1,1], (b,c)->[1], (a,c)->[1]
Map(Text line):
	String[] bill = Tokenize(line, ',');
	//parto da i=1 perchè la data non mi serve
for(i=1;i<bill.length;i++)
			for(j=i;bill.length;j++)
				product1 = bill[i];
				product2 = bill[j];
				//crea la coppia di prodotti mettendo sulla sinistra quello che viene prima dei due secondo l'ordine lessicografico
				if(product1.compareTo(product2))
					emit(ProductPair(product2, product1), 1);
				else
					emit(ProductPair(product2, product1),1);

//somma gli uno
Reduce(ProductPair pair, int[] counts):
	int sum = 0;
	for each c in counts:
		sum += c;
	emit(pair, sum);

STAGE II:

//da a,b ->2 genera a->(b,2) e b->(a,2), per ogni coppia chiave-valore letta dall'input del I stage.
Map(String product1, String product2, int quantity):
	emit(product1, Product2Quantity(product2, quantity));
	emit(product2, Product2Quantity(product1, quantity));

//da a->[(a,2),(b,2),(c,1)] genera a,b->100%, a,c->50%. le coppie che nell'output finale non compaiono significa che non sono mai state vendute insieme, ovvero le coppie con 0% non vengono scritte
Reduce(String product1, Product2Quantity[] p2qs):
	//prendi dalla lista delle coppie prodotto-quantità, la coppia relativa a product1. es a->[(a,2),(b,3)..] prendo (a,2) e la sua quantità(2 nell'esempio) la setto come denominatore
	foreach(p2q in p2qs)
		if(p2q.getProduct=product1)
			double denominatore = p2q.getQuantity ;
	//ora per ogni coppia prodotto-quantità con prodotto diverso da product1 effettua il rapporto e genera la percentuale
	foreach(p2q in p2qs and p2q.getProduct!=product1):
		double numeratore = p2q.getQuantity;
		emit((product1, p2q.getProduct), (numeratore/denominatore)*100);
		
esercizio 5:

STAGE I:

//da a,b,c genero (a,b)->1,(a,c)->1,(b,c)->1,(a,b,c)->1 per ogni line in input
Map(Text line):
	//creo i contenitori che conterranno i sottoinsiemi di cardinalita' 2,3,4; tali contenitori non devono essere ordinati
	//e devono garantire l'unicita' degli elementi contenuti
	Set<Set<String>> coppie;
	Set<Set<String>> triple;
	Set<Set<String>> quadruple;
	products[] = tokenize(line);
	
	//per ogni prodotto nella riga
	foreach(product1 in products):
		//lo accoppio con gli stessi prodotti
		foreach(product2 in products):
			//la coppia deve essere formata da elementi diversi
			if(product1 != product2):
				//l'uso dei Set mi garantisce l'unicita' di ogni coppia all'interno del contenitore
				coppie.add(Set<String> (product1,product2));

	//associo i singoli elementi con le coppie per generare le triple
	foreach(product1 in products):
		foreach(coppia in coppie):
			if(!coppia.contains(product1)):
				triple.add(coppia.add(product1));
				
	//associo i singoli elementi con le triple per generare le quadruple
	foreach(product1 in products):
		foreach(tripla in triple):
			if(!tripla.contains(product1)):
				quadruple.add(tripla.add(product1));
	
	foreach(coppia in coppie)
		//la funzione toString genera una stringa come concatenazione di stringhe ordinate lessicograficamente separate da una virgola
		emit(toString(coppia));
		
	foreach(tripla in triple)
		emit(toString(tripla));
		
	foreach(quadrupla in quadruple)
		emit(toString(quadrupla));
	
//da ((a,b), [1,1,...,1]) genero (a,b)->N
Reduce(Text el, Int[] arr):
	sum = 0;
	foreach(i in arr):
		sum += i;
	emit(el,sum);